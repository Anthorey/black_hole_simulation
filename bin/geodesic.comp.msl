#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    packed_float3 CameraPosition;
    float TanHalfFov;
    packed_float3 CameraRight;
    float Aspect;
    packed_float3 CameraUp;
    uint ObjectCount;
    packed_float3 CameraForward;
    float DiskR1;
    float DiskR2;
};

struct Object
{
    packed_float3 Position;
    float Radius;
    packed_float3 Color;
    float Mass;
};

struct type_StructuredBuffer_Object
{
    Object _m0[1];
};

constant float3 _416 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_Object& objects [[buffer(1)]], texture2d<float, access::write> outImage [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _448;
        if (!(gl_GlobalInvocationID.x >= 200u))
        {
            _448 = gl_GlobalInvocationID.y >= 150u;
        }
        else
        {
            _448 = true;
        }
        if (_448)
        {
            break;
        }
        float3 _513 = fast::normalize(((float3(UniformBuffer.CameraRight) * (((((float(gl_GlobalInvocationID.x) + 0.5) * 0.00999999977648258209228515625) - 1.0) * UniformBuffer.Aspect) * UniformBuffer.TanHalfFov)) - (float3(UniformBuffer.CameraUp) * ((1.0 - ((float(gl_GlobalInvocationID.y) + 0.5) * 0.01333333365619182586669921875)) * UniformBuffer.TanHalfFov))) + float3(UniformBuffer.CameraForward));
        float _527 = length(float3(UniformBuffer.CameraPosition));
        float _535 = acos(UniformBuffer.CameraPosition[2] / _527);
        float _543 = precise::atan2(UniformBuffer.CameraPosition[1], UniformBuffer.CameraPosition[0]);
        float _547 = _513.x;
        float _551 = _513.y;
        float _555 = _513.z;
        float _559 = sin(_535);
        float _561 = cos(_543);
        float _567 = sin(_543);
        float _575 = cos(_535);
        float _579 = (((_559 * _561) * _547) + ((_559 * _567) * _551)) + (_575 * _555);
        float _597 = ((((_575 * _561) * _547) + ((_575 * _567) * _551)) - (_559 * _555)) / _527;
        float _611 = (((-_567) * _547) + (_561 * _551)) / (_527 * _559);
        float _615 = _527 * _527;
        float _625 = 1.0 - (12689999872.0 / _527);
        float _651 = _625 * sqrt(((_579 * _579) / _625) + (_615 * ((_597 * _597) + (((_559 * _559) * _611) * _611))));
        float3 _696;
        float3 _699;
        _696 = _416;
        _699 = float3(UniformBuffer.CameraPosition);
        float3 _697;
        float3 _700;
        float _706;
        float _708;
        float _710;
        float _712;
        float _714;
        float _716;
        bool _702;
        float _704;
        bool _1122;
        bool _701 = false;
        float _703 = 0.0;
        float _705 = _535;
        float _707 = _543;
        float _709 = _579;
        float _711 = _597;
        float _713 = _611;
        float _715 = _527;
        int _717 = 0;
        for (;;)
        {
            if (_717 < 60000)
            {
                if (_715 <= 12689999872.0)
                {
                    outImage.write(float4(0.0, 0.0, 0.0, 1.0), uint2(gl_GlobalInvocationID.xy));
                    _1122 = true;
                    break;
                }
                float _790 = 1.0 - (12689999872.0 / _715);
                float _794 = _651 / _790;
                float _806 = (2.0 * _715) * _715;
                float _828 = sin(_705);
                float _840 = ((((((-12689999872.0) / _806) * _790) * _794) * _794) + (((12689999872.0 / (_806 * _790)) * _709) * _709)) + (_715 * ((_711 * _711) + (((_828 * _828) * _713) * _713)));
                float _842 = (-2.0) * _709;
                float _848 = cos(_705);
                float _856 = ((_842 * _711) / _715) + (((_828 * _848) * _713) * _713);
                float _870 = ((_842 * _713) / _715) - ((((2.0 * _848) / _828) * _711) * _713);
                _697 = float3(_840, _856, _870);
                _716 = _715 + (10000000.0 * _709);
                _706 = _705 + (10000000.0 * _711);
                _708 = _707 + (10000000.0 * _713);
                _710 = _709 + (10000000.0 * _840);
                _712 = _711 + (10000000.0 * _856);
                _714 = _713 + (10000000.0 * _870);
                float _920 = _716 * sin(_706);
                float _924 = _920 * cos(_708);
                float _928 = _920 * sin(_708);
                float _932 = _716 * cos(_706);
                _700 = float3(_924, _928, _932);
                float _940 = _703 - distance(_699, _700);
                float _946 = length(float2(_924, _932));
                bool _966;
                if ((_699.y * _928) < 0.0)
                {
                    _966 = _946 >= UniformBuffer.DiskR1;
                }
                else
                {
                    _966 = false;
                }
                bool _978;
                if (_966)
                {
                    _978 = _946 <= UniformBuffer.DiskR2;
                }
                else
                {
                    _978 = false;
                }
                if (_978)
                {
                    float _990 = length(_700) / UniformBuffer.DiskR2;
                    outImage.write(float4(1.0, _990, 0.20000000298023223876953125, _990), uint2(gl_GlobalInvocationID.xy));
                    _1122 = true;
                    break;
                }
                if (_940 < 0.0)
                {
                    float _1014;
                    float _1104;
                    bool _1105;
                    float _1013 = 1000000015047466219876688855040.0;
                    int _1016 = 0;
                    uint _1021;
                    for (;;)
                    {
                        _1021 = uint(_1016);
                        if (_1021 < UniformBuffer.ObjectCount)
                        {
                            float _1043 = distance(_700, float3(objects._m0[_1021].Position)) - objects._m0[_1021].Radius;
                            _1014 = precise::min(_1013, _1043);
                            if (_1043 > 0.0)
                            {
                                _1013 = _1014;
                                _1016++;
                                continue;
                            }
                            outImage.write(float4(float3(objects._m0[_1021].Color) * (0.100000001490116119384765625 + (0.89999997615814208984375 * precise::max(dot(fast::normalize(_700 - float3(objects._m0[_1021].Position)), fast::normalize(float3(UniformBuffer.CameraPosition) - _700)), 0.0))), 1.0), uint2(gl_GlobalInvocationID.xy));
                            _1104 = _1014;
                            _1105 = true;
                            break;
                        }
                        else
                        {
                            _1104 = _1013;
                            _1105 = _701;
                            break;
                        }
                    }
                    if (_1105)
                    {
                        _1122 = _1105;
                        break;
                    }
                    _704 = _1104;
                    _702 = _1105;
                }
                else
                {
                    _704 = _940;
                    _702 = _701;
                }
                if (_716 > 1000000015047466219876688855040.0)
                {
                    _1122 = _702;
                    break;
                }
                _696 = _697;
                _699 = _700;
                _701 = _702;
                _703 = _704;
                _705 = _706;
                _707 = _708;
                _709 = _710;
                _711 = _712;
                _713 = _714;
                _715 = _716;
                _717++;
                continue;
            }
            else
            {
                _1122 = _701;
                break;
            }
        }
        if (_1122)
        {
            break;
        }
        outImage.write(float4(0.0199999995529651641845703125, 0.0199999995529651641845703125, 0.0199999995529651641845703125, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

