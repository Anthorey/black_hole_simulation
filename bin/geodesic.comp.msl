#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    packed_float3 CameraPosition;
    float TanHalfFov;
    packed_float3 CameraRight;
    float Aspect;
    packed_float3 CameraUp;
    uint ObjectCount;
    packed_float3 CameraForward;
    float DiskR1;
    float DiskR2;
};

struct Object
{
    packed_float3 Position;
    float Radius;
    packed_float3 Color;
    float Mass;
};

struct type_StructuredBuffer_Object
{
    Object _m0[1];
};

constant float3 _405 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_Object& objects [[buffer(1)]], texture2d<float, access::write> outImage [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _437;
        if (!(gl_GlobalInvocationID.x >= 100u))
        {
            _437 = gl_GlobalInvocationID.y >= 75u;
        }
        else
        {
            _437 = true;
        }
        if (_437)
        {
            break;
        }
        float3 _502 = fast::normalize(((float3(UniformBuffer.CameraRight) * (((((float(gl_GlobalInvocationID.x) + 0.5) * 0.0199999995529651641845703125) - 1.0) * UniformBuffer.Aspect) * UniformBuffer.TanHalfFov)) - (float3(UniformBuffer.CameraUp) * ((1.0 - ((float(gl_GlobalInvocationID.y) + 0.5) * 0.0266666673123836517333984375)) * UniformBuffer.TanHalfFov))) + float3(UniformBuffer.CameraForward));
        float _516 = length(float3(UniformBuffer.CameraPosition));
        float _524 = acos(UniformBuffer.CameraPosition[2] / _516);
        float _532 = precise::atan2(UniformBuffer.CameraPosition[1], UniformBuffer.CameraPosition[0]);
        float _536 = _502.x;
        float _540 = _502.y;
        float _544 = _502.z;
        float _548 = sin(_524);
        float _550 = cos(_532);
        float _556 = sin(_532);
        float _564 = cos(_524);
        float _568 = (((_548 * _550) * _536) + ((_548 * _556) * _540)) + (_564 * _544);
        float _586 = ((((_564 * _550) * _536) + ((_564 * _556) * _540)) - (_548 * _544)) / _516;
        float _600 = (((-_556) * _536) + (_550 * _540)) / (_516 * _548);
        float _604 = _516 * _516;
        float _614 = 1.0 - (12689999872.0 / _516);
        float _640 = _614 * sqrt(((_568 * _568) / _614) + (_604 * ((_586 * _586) + (((_548 * _548) * _600) * _600))));
        float3 _683;
        float3 _686;
        _683 = _405;
        _686 = float3(UniformBuffer.CameraPosition);
        float3 _684;
        float3 _687;
        float _691;
        float _693;
        float _695;
        float _697;
        float _699;
        float _701;
        bool _689;
        bool _1076;
        bool _688 = false;
        float _690 = _524;
        float _692 = _532;
        float _694 = _568;
        float _696 = _586;
        float _698 = _600;
        float _700 = _516;
        int _702 = 0;
        for (;;)
        {
            if (_702 < 60000)
            {
                if (_700 <= 12689999872.0)
                {
                    outImage.write(float4(0.0, 0.0, 0.0, 1.0), uint2(gl_GlobalInvocationID.xy));
                    _1076 = true;
                    break;
                }
                float _774 = 1.0 - (12689999872.0 / _700);
                float _778 = _640 / _774;
                float _790 = (2.0 * _700) * _700;
                float _812 = sin(_690);
                float _824 = ((((((-12689999872.0) / _790) * _774) * _778) * _778) + (((12689999872.0 / (_790 * _774)) * _694) * _694)) + (_700 * ((_696 * _696) + (((_812 * _812) * _698) * _698)));
                float _826 = (-2.0) * _694;
                float _832 = cos(_690);
                float _840 = ((_826 * _696) / _700) + (((_812 * _832) * _698) * _698);
                float _854 = ((_826 * _698) / _700) - ((((2.0 * _832) / _812) * _696) * _698);
                _684 = float3(_824, _840, _854);
                _701 = _700 + (10000000.0 * _694);
                _691 = _690 + (10000000.0 * _696);
                _693 = _692 + (10000000.0 * _698);
                _695 = _694 + (10000000.0 * _824);
                _697 = _696 + (10000000.0 * _840);
                _699 = _698 + (10000000.0 * _854);
                float _904 = _701 * sin(_691);
                float _908 = _904 * cos(_693);
                float _912 = _904 * sin(_693);
                float _916 = _701 * cos(_691);
                _687 = float3(_908, _912, _916);
                if ((_686.y * _912) < 0.0)
                {
                    float _934 = length(float2(_908, _916));
                    bool _954;
                    if (_934 >= UniformBuffer.DiskR1)
                    {
                        _954 = _934 <= UniformBuffer.DiskR2;
                    }
                    else
                    {
                        _954 = false;
                    }
                    if (_954)
                    {
                        float _966 = length(_687) / UniformBuffer.DiskR2;
                        outImage.write(float4(1.0, _966, 0.20000000298023223876953125, _966), uint2(gl_GlobalInvocationID.xy));
                        _1076 = true;
                        break;
                    }
                }
                int _982 = 0;
                uint _987;
                for (;;)
                {
                    _987 = uint(_982);
                    if (_987 < UniformBuffer.ObjectCount)
                    {
                        if (distance(_687, float3(objects._m0[_987].Position)) > objects._m0[_987].Radius)
                        {
                            _982++;
                            continue;
                        }
                        outImage.write(float4(float3(objects._m0[_987].Color) * (0.100000001490116119384765625 + (0.89999997615814208984375 * precise::max(dot(fast::normalize(_687 - float3(objects._m0[_987].Position)), fast::normalize(float3(UniformBuffer.CameraPosition) - _687)), 0.0))), 1.0), uint2(gl_GlobalInvocationID.xy));
                        _689 = true;
                        break;
                    }
                    else
                    {
                        _689 = _688;
                        break;
                    }
                }
                if (_689)
                {
                    _1076 = _689;
                    break;
                }
                if (_701 > 1000000015047466219876688855040.0)
                {
                    _1076 = _689;
                    break;
                }
                _683 = _684;
                _686 = _687;
                _688 = _689;
                _690 = _691;
                _692 = _693;
                _694 = _695;
                _696 = _697;
                _698 = _699;
                _700 = _701;
                _702++;
                continue;
            }
            else
            {
                _1076 = _688;
                break;
            }
        }
        if (_1076)
        {
            break;
        }
        outImage.write(float4(0.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

