#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    packed_float3 CameraPosition;
    float TanHalfFov;
    packed_float3 CameraRight;
    float Aspect;
    packed_float3 CameraUp;
    float Padding0;
    packed_float3 CameraForward;
    float Padding1;
    uint ObjectCount;
};

struct Object
{
    packed_float3 Position;
    float Radius;
    packed_float3 Color;
    float Mass;
};

struct type_StructuredBuffer_Object
{
    Object _m0[1];
};

constant float3 _382 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_Object& objects [[buffer(1)]], texture2d<float, access::write> outImage [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _413;
        if (!(gl_GlobalInvocationID.x >= 200u))
        {
            _413 = gl_GlobalInvocationID.y >= 150u;
        }
        else
        {
            _413 = true;
        }
        if (_413)
        {
            break;
        }
        float3 _478 = fast::normalize(((float3(UniformBuffer.CameraRight) * (((((float(gl_GlobalInvocationID.x) + 0.5) * 0.00999999977648258209228515625) - 1.0) * UniformBuffer.Aspect) * UniformBuffer.TanHalfFov)) - (float3(UniformBuffer.CameraUp) * ((1.0 - ((float(gl_GlobalInvocationID.y) + 0.5) * 0.01333333365619182586669921875)) * UniformBuffer.TanHalfFov))) + float3(UniformBuffer.CameraForward));
        float _492 = length(float3(UniformBuffer.CameraPosition));
        float _500 = acos(UniformBuffer.CameraPosition[2] / _492);
        float _508 = precise::atan2(UniformBuffer.CameraPosition[1], UniformBuffer.CameraPosition[0]);
        float _512 = _478.x;
        float _516 = _478.y;
        float _520 = _478.z;
        float _524 = sin(_500);
        float _526 = cos(_508);
        float _532 = sin(_508);
        float _540 = cos(_500);
        float _544 = (((_524 * _526) * _512) + ((_524 * _532) * _516)) + (_540 * _520);
        float _562 = ((((_540 * _526) * _512) + ((_540 * _532) * _516)) - (_524 * _520)) / _492;
        float _576 = (((-_532) * _512) + (_526 * _516)) / (_492 * _524);
        float _580 = _492 * _492;
        float _590 = 1.0 - (12689999872.0 / _492);
        float _616 = _590 * sqrt(((_544 * _544) / _590) + (_580 * ((_562 * _562) + (((_524 * _524) * _576) * _576))));
        float3 _659;
        float3 _662;
        _659 = _382;
        _662 = float3(UniformBuffer.CameraPosition);
        float3 _660;
        float3 _663;
        float _665;
        float _667;
        float _669;
        float _671;
        float _673;
        float _677;
        bool _675;
        bool _986;
        float _664 = _500;
        float _666 = _508;
        float _668 = _544;
        float _670 = _562;
        float _672 = _576;
        bool _674 = false;
        float _676 = _492;
        int _678 = 0;
        for (;;)
        {
            if (_678 < 60000)
            {
                if (_676 <= 12689999872.0)
                {
                    outImage.write(float4(0.0, 0.0, 0.0, 1.0), uint2(gl_GlobalInvocationID.xy));
                    _986 = true;
                    break;
                }
                int _719 = 0;
                uint _724;
                for (;;)
                {
                    _724 = uint(_719);
                    if (_724 < UniformBuffer.ObjectCount)
                    {
                        if (distance(_662, float3(objects._m0[_724].Position)) > objects._m0[_724].Radius)
                        {
                            _719++;
                            continue;
                        }
                        outImage.write(float4(float3(objects._m0[_724].Color) * (0.100000001490116119384765625 + (0.89999997615814208984375 * precise::max(dot(fast::normalize(_662 - float3(objects._m0[_724].Position)), fast::normalize(float3(UniformBuffer.CameraPosition) - _662)), 0.0))), 1.0), uint2(gl_GlobalInvocationID.xy));
                        _675 = true;
                        break;
                    }
                    else
                    {
                        _675 = _674;
                        break;
                    }
                }
                if (_675)
                {
                    _986 = _675;
                    break;
                }
                float _834 = 1.0 - (12689999872.0 / _676);
                float _838 = _616 / _834;
                float _850 = (2.0 * _676) * _676;
                float _872 = sin(_664);
                float _884 = ((((((-12689999872.0) / _850) * _834) * _838) * _838) + (((12689999872.0 / (_850 * _834)) * _668) * _668)) + (_676 * ((_670 * _670) + (((_872 * _872) * _672) * _672)));
                float _886 = (-2.0) * _668;
                float _892 = cos(_664);
                float _900 = ((_886 * _670) / _676) + (((_872 * _892) * _672) * _672);
                float _914 = ((_886 * _672) / _676) - ((((2.0 * _892) / _872) * _670) * _672);
                _660 = float3(_884, _900, _914);
                _677 = _676 + (10000000.0 * _668);
                _665 = _664 + (10000000.0 * _670);
                _667 = _666 + (10000000.0 * _672);
                _669 = _668 + (10000000.0 * _884);
                _671 = _670 + (10000000.0 * _900);
                _673 = _672 + (10000000.0 * _914);
                float _964 = _677 * sin(_665);
                _663 = float3(_964 * cos(_667), _964 * sin(_667), _677 * cos(_665));
                _659 = _660;
                _662 = _663;
                _664 = _665;
                _666 = _667;
                _668 = _669;
                _670 = _671;
                _672 = _673;
                _674 = _675;
                _676 = _677;
                _678++;
                continue;
            }
            else
            {
                _986 = _674;
                break;
            }
        }
        if (_986)
        {
            break;
        }
        outImage.write(float4(1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

